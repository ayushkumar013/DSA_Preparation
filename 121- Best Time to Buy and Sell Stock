//You are given an array prices where prices[i] is the price of a given stock on the ith day.
//You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
//Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
//Example 1:
//            Input: prices = [7,1,5,3,6,4]
//            Output: 5

class Solution {
    public int maxProfit(int[] prices) {
        int buy=Integer.MAX_VALUE;  //initializing buy to maximum value
        int sell=Integer.MIN_VALUE;  // initializing sell to smallest value
        int max=Integer.MIN_VALUE;
        for(int i=0;i<prices.length;i++){
           buy=Math.min(buy,prices[i]);   //updating buy as we are getting minimum value
           sell=prices[i]-buy;    // calculating selling price considering per day buying
           max=Math.max(sell,max);   //storing only maximum sale
        }
        return max;
    }
}                time complexity- O(n),  space complexity- O(1);
