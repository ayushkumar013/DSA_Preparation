//Given an integer array nums, return the length of the longest strictly increasing subsequence
// Example 1:
//      Input: nums = [10,9,2,5,3,7,101,18]
//      Output: 4

//                                                      TABULATION
//class Solution {
//     public int lengthOfLIS(int[] nums) {
//         int[] dp=new int[nums.length];
//         Arrays.fill(dp,1);
//         for(int i=1;i<nums.length;i++){
//             for(int j=0;j<i;j++){
//                 if(nums[i]>nums[j]){
//                     dp[i]=Math.max(dp[i],dp[j]+1);
//                 }
//             }
//         }
//         return Arrays.stream(dp).max().getAsInt();
//     }
// }  tc- O(n), sc- O(n)


//                                                      MEMOIZATION
//class Solution {
//     static int solve(int[] nums,int i,int p,int[][] dp){
//         if(i>=nums.length) return 0;
//         if(p!=-1 && dp[i][p]!=-1) return dp[i][p];
//         int take=0;
//         if(p==-1 || nums[p]<nums[i]) take=1+solve(nums,i+1,i,dp);
//         int skip=solve(nums,i+1,p,dp);
//         if(p!=-1) return dp[i][p]=Math.max(take,skip);
//         return Math.max(take,skip);
//     }
//     public int lengthOfLIS(int[] nums) {
//         int[][] dp=new int[nums.length][nums.length];
//         for(int[] i:dp) Arrays.fill(i,-1);
//         return solve(nums,0,-1,dp);
//     }
// }     tc- O(n2), sc- O(n2)


//                                                        RECURSION
// class Solution {
//     static int solve(int[] nums,int i,int p){
//         if(i>=nums.length) return 0;
//         int take=0;
//         if(p==-1 || nums[p]<nums[i]) take=1+solve(nums,i+1,i);
//         int skip=solve(nums,i+1,p);
//         return Math.max(take,skip);
//     }
//     public int lengthOfLIS(int[] nums) {
//         return solve(nums,0,-1);
//     }
// }  tc-O(2n), sc- O(n)
