// A binary tree is named Even-Odd if it meets the following conditions:
// The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
// For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
// For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
// Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        boolean even=true;
        while(q.size()>0){
            int n=q.size();
            int pre=(even)?Integer.MIN_VALUE:Integer.MAX_VALUE;
           while(n>0){
                if((even)&&(q.peek().val%2==0 ||q.peek().val<=pre)) return false;
               if((!even)&&(q.peek().val%2!=0 ||q.peek().val>=pre)) return false;
              pre=q.peek().val;
              if(q.peek().left!=null) q.add(q.peek().left);
              if(q.peek().right!=null) q.add(q.peek().right);
              q.remove();
              n--;
           } 

           even=!even;
        }
        return true;
    }
}   // tc- O(n),  sc- O(n)
