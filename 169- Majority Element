//Given an array nums of size n, return the majority element.
//The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
//Example 1:
//           Input: nums = [3,2,3]
//           Output: 3

class Solution {
    public int majorityElement(int[] nums) {
        int el=nums[0];    //to store max. count element 
        int c=1;           //to store count of current element
        for(int i=1;i<nums.length;i++){
            if(c==0) {                    //to obtain max. count element.
                el=nums[i];
                c++;
            }
            else if(nums[i]!=el) c--;
            else c++;
        }
       c=0;
        for(int i=0;i<nums.length;i++){    //to check the occurence of max. count element
            if(nums[i]==el) c++;   
        }
        if(c>=(nums.length)/2) return el;
        return -1;
    }
}         //time complexity= O(n),   space= O(1)
