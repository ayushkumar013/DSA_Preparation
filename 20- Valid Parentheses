//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
//An input string is valid if:
//Open brackets must be closed by the same type of brackets.
//Open brackets must be closed in the correct order.
//Every close bracket has a corresponding open bracket of the same type.
//Example 1:
//           Input: s = "()"
//           Output: true

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if((ch==')' || ch=='}' || ch==']')){
                if((st.size()!=0)&&(st.peek()=='(' &&ch==')'||st.peek()=='{'&&ch=='}'||st.peek()=='['&&ch==']')) {
                    st.pop();
                }
                else return false;
            }
            else{
                st.push(ch);
            }
        }
        return st.size()==0;
    }
}             //time complexity- O(n),  space complexity- O(n)
