//You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
//Merge nums1 and nums2 into a single array sorted in non-decreasing order.
//The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
//Example 1:
//              Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
//              Output: [1,2,2,3,5,6]

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int a=m-1;  // a pointer at end of nums1 i.e. upto the present element in nums1
        int b=n-1;  // b pointer a end of nums2
        int k=nums1.length-1;    // k pointer at end of nums1 length
        while(b>=0){     // loop until nums2 gets empty.
            if(a>=0 && nums1[a]>=nums2[b]){    
                nums1[k]=nums1[a];
                nums1[a]=0;
                a--;
            }
            else {
                nums1[k]=nums2[b];
                b--;
        }
        k--;
        }
    }
}
