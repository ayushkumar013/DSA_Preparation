// Given a BST with n (n>=2) nodes, find the kth common ancestor of nodes x and y in the given tree. 
// Return -1 if kth ancestor does not exist.
// Nodes x and y will always be present in the input of a BST, and x != y.

class Solution {
    static Node lca(Node root,int x,int y){
        if(root==null) return null;
        if(root.data==x || root.data==y) return root;
        Node left=lca(root.left,x,y);
        Node right=lca(root.right,x,y);
        if(left!=null && right!=null) return root;
        return (left!=null)?left:right;
    }
    static void solve(Node l,Node root,List<Integer> li){
        li.add(root.data);
        if(root.data==l.data) return;
        if(root.data<l.data) solve(l,root.right,li);
        else solve(l,root.left,li);
        return;
    }
    public int kthCommonAncestor(Node root, int k, int x, int y) {
        List<Integer> li=new ArrayList<>();
        Node l=lca(root,x,y);
        solve(l,root,li);
        if(li.size()<k) return -1;
        return li.get(li.size()-k);
    }
}    //tc- O(n), sc- O(n)
