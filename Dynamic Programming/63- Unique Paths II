//You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
//An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
//Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
// Example 1:
//     Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
//     Output: 2
//                                                   BOTTOM-UP
class Solution {
    public int uniquePathsWithObstacles(int[][] nums) {
        int m=nums.length,n=nums[0].length;
        int[][] dp=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(nums[i][j]==1) continue;
                if(i==0 && j==0) dp[i][j]=1;
                else{
                    int sum=0;
                    if(i>0) sum+=dp[i-1][j];
                    if(j>0) sum+=dp[i][j-1];
                    dp[i][j]=sum;
                }
            }
        }
        return dp[m-1][n-1];
    }
}
//                                                   MEMOIZATION
class Solution {
    static int solve(int[][] nums,int i,int j,int m,int n,int[][] dp){
        if(i==m || j==n ) return 0;
        if(nums[i][j]==1) return 0;
        if(i==m-1 && j==n-1) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int ans=0;
        ans+=solve(nums,i+1,j,m,n,dp);
        ans+=solve(nums,i,j+1,m,n,dp);
        return dp[i][j]=ans;
    }
    public int uniquePathsWithObstacles(int[][] nums) {
        int m=nums.length,n=nums[0].length,ans=0;
        int[][] dp=new int[m][n];
        for(int i[]:dp) Arrays.fill(i,-1);
        ans+=solve(nums,0,0,m,n,dp);
        return ans;
    }
}
