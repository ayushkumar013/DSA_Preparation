//You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
//Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
//Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
//Example 1:
//           Input: nums = [2,3,1,1,4]
//           Output: 2
class Solution {
    public int jump(int[] nums) {
        if(nums.length==1) return 0;
        int coverage=0;  //to store current max. jump
        int reached=0;   
        int ans=0;     //to store maximum jump
        for(int i=0;i<nums.length;i++){
            coverage=Math.max(coverage,nums[i]+i);
            if(i==reached){
                reached=coverage;
                ans++;
                if(reached>=nums.length-1) return ans;
            }
        }
        return nums.length/2;
    }
}           // time complexity- O(n), space- (1)
