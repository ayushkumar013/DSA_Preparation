// Given an m x n grid of characters board and a string word, return true if word exists in the grid.
// The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
// The same letter cell may not be used more than once.
//  Example 1:
//        Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
//        Output: true

class Solution {
    static boolean solve(char[][] nums,int i,int j,String s,int k,boolean[][] visited){
        if(k>=s.length()) return true;
        if(nums[i][j]==s.charAt(k)){
            visited[i][j]=true;
            boolean up=(i>0 && !visited[i-1][j])? solve(nums,i-1,j,s,k+1,visited):false;
            boolean down=(i<nums.length-1 && !visited[i+1][j])? solve(nums,i+1,j,s,k+1,visited):false;
            boolean right=(j<nums[0].length-1 && !visited[i][j+1])? solve(nums,i,j+1,s,k+1,visited):false;
            boolean left=(j>0 && !visited[i][j-1])? solve(nums,i,j-1,s,k+1,visited):false;
            visited[i][j]=false;
            if(up || down || right || left) return true;
            if(k==s.length()-1) return true;
        }
        return false;
    }
    public boolean exist(char[][] nums, String s) {
     boolean[][] visited =new boolean[nums.length][nums[0].length];
     for(boolean[] i:visited) Arrays.fill(i,false);
     for(int i=0;i<nums.length;i++){
        for(int j=0;j<nums[0].length;j++) if(solve(nums,i,j,s,0,visited)) return true;
     }   
     return false;
    }
}    // tc- O(m*n* 4^k), sc- O(m*n)
