//Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
//Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
//The tests are generated such that there is exactly one solution. You may not use the same element twice.
//Your solution must use only constant extra space.
//Example 1:
//               Input: numbers = [2,7,11,15], target = 9
//               Output: [1,2]

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i=0,j=nums.length-1;    //taking 2 pointers
        while(i<j){
            int sum=nums[i]+nums[j];   //calculating initial result of both pointer 
            if(sum==target) return new int[]{i+1,j+1};
            else if(sum<target) i++;     // if sum is less than target that means we have to increase i i.e. left side pointer to increase result value
            else j--;
        }
        return new int[]{};
    }
}            //time complexity-O(n)
             //space complexity-O(1)
