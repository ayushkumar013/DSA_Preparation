//Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
//Example 1:
//      Input: root = [3,9,20,null,null,15,7]
//      Output: [[3],[9,20],[15,7]]

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null) return ans;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(q.size()>0){
            List<Integer> li=new ArrayList<>();
            int n=q.size();
            for(int i=0;i<n;i++){
                if(q.peek().left!=null) q.add(q.peek().left);
                if(q.peek().right!=null) q.add(q.peek().right);
                li.add(q.remove().val);
            }
            ans.add(li);
        }
        return ans;
    }
}       //time- O(n),   space- O(n)
