//Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
//Example 1:
//Input
//         ["MinStack","push","push","push","getMin","pop","top","getMin"]
//         [[],[-2],[0],[-3],[],[],[],[]]
//         Output
//         [null,null,null,null,-3,null,0,-2]
class MinStack {
    Stack<Integer> st=new Stack<>();
    Stack<Integer> minStack=new Stack<>();
    public MinStack() {
        st=new Stack<Integer>();
    }
    
    public void push(int val) {
        st.push(val);
        if(minStack.size()==0) minStack.push(val);
        else{
            if(minStack.peek()<val) minStack.push(minStack.peek());
            else minStack.push(val);
        }
    }
    
    public void pop() {
        st.pop();
        minStack.pop();
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
    return  minStack.peek();
    }
}
