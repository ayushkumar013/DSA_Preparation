//Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.
//After doing so, return the head of the final linked list.  You may return any such answer.
//(Note that in the examples below, all sequences are serializations of ListNode objects.)

class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        Map<Integer,ListNode> mp=new HashMap<>();
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        int sum=0;
        mp.put(0,dummy);
        while(head!=null){
            sum+=head.val;
            if(mp.containsKey(sum)){
                int psum=sum;
                ListNode start=mp.get(sum);
                ListNode temp=start;
                while(temp!=head){
                    temp=temp.next;
                    psum+=temp.val;
                    if(temp!=head) mp.remove(psum);
                }
                start.next=head.next;
            }
            else mp.put(sum,head);
            head=head.next;
        }   
        return dummy.next;     
    }
}    tc- O(n), sc- O(n)
