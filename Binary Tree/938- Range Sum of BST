//Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
//Example 1:
//                   Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
//                   Output: 32
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root==null) return 0;
        int sum=0;
        if(root.val >low)   
            sum+=rangeSumBST(root.left,low,high);
        
        if(root.val>=low && root.val<=high){
            sum+=root.val;
        }
        if(root.val<high){
            sum+=rangeSumBST(root.right,low,high);
        }
        return sum;
    }
}                              //  O(n) Complexity time and space.
