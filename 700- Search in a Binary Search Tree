//You are given the root of a binary search tree (BST) and an integer val.
//Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.
//Example 1:
//          Input: root = [4,2,7,1,3], val = 2
//          Output: [2,1,3]

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null) return null;
        if(root.val==val) return root;
         TreeNode ans=new TreeNode();
        if(root.val>val) ans=searchBST(root.left,val);
        else ans=searchBST(root.right,val);
        return ans;
    }
}      //time complexity- O(n),  space complexity- O(h)  h is the height
