// You are given an integer array nums and a positive integer k.
// Return the number of subarrays where the maximum element of nums appears at least k times in that subarray
//  Example 1:
//    Input: nums = [1,3,2,3,3], k = 2
/     Output: 6

class Solution {
    public long countSubarrays(int[] nums, int k) {
        int max=Arrays.stream(nums).max().getAsInt();
        int i=0,j=0,count=0;
        long ans=0;
        while(j<nums.length){
            if(nums[j]==max) count++;
            while(count>=k){
                ans+=nums.length-j;
                if(nums[i]==max) count--;
                i++;
            }
            j++;
        }
        return ans;
    }
}    //tc- O(n), sc- O(1)

//Approach-2
// class Solution {
//     public long countSubarrays(int[] nums, int k) {
//         int max=Arrays.stream(nums).max().getAsInt();
//         List<Integer> li=new ArrayList<>();
//         long ans=0;
//         for(int i=0;i<nums.length;i++){
//             if(nums[i]==max) li.add(i);
//             if(li.size()>=k){
//                 int l=li.get(li.size()-k);
//                 ans+=l+1;
//             }
//         }
//         return ans;
//     }
// } tc-O(n), sc- O(n)
