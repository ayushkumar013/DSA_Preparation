//You are given a 2D 0-indexed integer array dimensions.
//For all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i.
//Return the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.
//Example 1:
// Input: dimensions = [[9,3],[8,6]]
// Output: 48

class Solution {
    public int areaOfMaxDiagonal(int[][] dimensions) {
        int area=0;
        double dia=0;
        double adia=0;
        for(int[] rectangle:dimensions){
            dia=Math.sqrt((rectangle[0]*rectangle[0])+(rectangle[1]*rectangle[1]));
            if(dia>adia){
                adia=dia;
                area=rectangle[0]*rectangle[1];
            }
            else if(dia==adia){
                area=Math.max(area,rectangle[0]*rectangle[1]);
            }
        }
        return area;
    }
}   //time- O(n),  space- O(n)
