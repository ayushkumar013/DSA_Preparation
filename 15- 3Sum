//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
//Notice that the solution set must not contain duplicate triplets.
//Example 1:
 //               Input: nums = [-1,0,1,2,-1,-4]
//                Output: [[-1,-1,2],[-1,0,1]]

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);            
        Set<List<Integer>> st=new HashSet<>();      
        if(nums.length<3) return new ArrayList<>();
        for(int i=0;i<nums.length-2;i++){
            int left=i+1,right=nums.length-1;
            while(left<right)
            {int sum=nums[i]+nums[left]+nums[right];
            if(sum==0){
                st.add(Arrays.asList(nums[i],nums[left],nums[right]));
                left++;
                right--;
            }
            else if(sum<0) left++;
            else right--;
            }
        }
        return new ArrayList<>(st);
    }
}                 //Time complexity-O(N2)        Space complexity-O(N2)  
