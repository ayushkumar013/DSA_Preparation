// You are given a binary string s that contains at least one '1'.
// You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.
// Return a string representing the maximum odd binary number that can be created from the given combination.
// Note that the resulting string can have leading zeros.

class Solution {
    public String maximumOddBinaryNumber(String s) {
        int one=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='1')one++;
        }
        StringBuilder sb=new StringBuilder();
       for(int i=0;i<s.length()-1;i++){
          if(one>1){
               sb.append("1");
               one--;
          }
          else{
              sb.append("0");
          }
       }
        return sb.append("1").toString();
    }
}   // tc- O(n), sc- O(n)
