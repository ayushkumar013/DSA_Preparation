//Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
//The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
//The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
//Example 1:
//      Input: candidates = [2,3,6,7], target = 7
//      Output: [[2,2,3],[7]]

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> li=new ArrayList<>();
        help(0,target,li,candidates,ans);
        return ans;
    }
    static void help(int i,int target,List<Integer> li,int[] nums,List<List<Integer>>ans){
        if(i==nums.length){
            if(target==0) ans.add(new ArrayList<>(li));
            return;
        }
        if(nums[i]<=target){
            li.add(nums[i]);
            help(i,target-nums[i],li,nums,ans);
            li.remove(li.size()-1);

        }
        help(i+1,target,li,nums,ans);
    }
}   //tc- O(2^t * k),  sc- O(n*k)
