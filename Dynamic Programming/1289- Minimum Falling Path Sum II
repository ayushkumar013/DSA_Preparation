// Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.
// A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.
//  Example 1:
//      Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
//      Output: 13

//                                         BOTTOM-UP
class Solution {
    public int minFallingPathSum(int[][] grid) {
        int n=grid.length;
        int[][] dp=new int[n][n];
        for(int i=0;i<n;i++) dp[n-1][i]=grid[n-1][i];
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<n;j++){
                int ans=Integer.MAX_VALUE;
                for(int next=0;next<n;next++){
                    if(next != j) ans=Math.min(ans,dp[i+1][next]);
                }
                dp[i][j]=grid[i][j]+ans;
            }
        } int ans=Integer.MAX_VALUE;
        for(int i=0;i<n;i++) ans=Math.min(ans,dp[0][i]);
        return ans;
    }
}
//                                                MEMOIZATION
class Solution {
    static int solve(int i,int j,int[][] nums,int[][] dp){
        if(i==nums.length-1) return nums[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int ans=Integer.MAX_VALUE;
        for(int next=0;next<nums.length;next++){
            if(next!=j) ans=Math.min(ans,solve(i+1,next,nums,dp));
        }
        return dp[i][j]=ans+nums[i][j];
    }
    public int minFallingPathSum(int[][] grid) {
        int[][] dp=new int[grid.length][grid.length];
        for(int i[]: dp) Arrays.fill(i,-1);
        int ans=Integer.MAX_VALUE;
        for(int j=0;j<grid.length;j++){
            ans=Math.min(ans,solve(0,j,grid,dp));
        }
        return ans;
    }
}
