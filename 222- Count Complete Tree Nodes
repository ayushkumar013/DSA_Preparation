//Given the root of a complete binary tree, return the number of the nodes in the tree.
//According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
//Design an algorithm that runs in less than O(n) time complexity.
// Example 1:
//            Input: root = [1,2,3,4,5,6]
//            Output: 6

class Solution {
    public int countNodes(TreeNode root) {
        return count(root);
    }
    static int count(TreeNode root){
        if(root==null) return 0;
       int l= count(root.left);
        int r=count(root.right);
        return (l+r+1);
    }
}      // time complexity- O(n),   space complexity- O(1)
