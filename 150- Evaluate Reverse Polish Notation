//You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
//Evaluate the expression. Return an integer that represents the value of the expression.
//Example 1:
//            Input: tokens = ["2","1","+","3","*"]
//            Output: 9
//            Explanation: ((2 + 1) * 3) = 9

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> st=new Stack<>();
        for(String token:tokens){
                      if (!token.equals("+") && !token.equals("-") && !token.equals("*") && !token.equals("/")) {
                st.push(Integer.parseInt(token));}
else{
    int operand2 = st.pop();
                int operand1 = st.pop();
                if (token.equals("*")) {
                    st.push(operand1 * operand2);
                } else if (token.equals("/")) {
                    st.push(operand1 / operand2);
                } else if (token.equals("+")) {
                    st.push(operand1 + operand2);
                } else {
                    st.push(operand1 - operand2);
                }
}
        }
        return st.pop();
    }
}
